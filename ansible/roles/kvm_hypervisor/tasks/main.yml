# - name: ensure kvm is installed and started
#   service: name=libvirtd state=started enabled=yes
#   register: libvirtd
#
# - name: wait for libvirtd to start up
#   pause: seconds=30
#   when: libvirtd.changed
#
# - name: ensure genisoimage is installed
#   yum: name=genisoimage state=latest

- name: collect dns server information
  shell: grep -m 1 nameserver /etc/resolv.conf | awk '{ print $2}'
  register: dns

- name: clean up any old temporary workspaces
  file: name={{ tmp_workspace }} state=absent
  ignore_errors: true

- name: create workspace folder
  file: name={{ tmp_workspace }} state=directory

- name: add ssh public key to hypervisor for hosts
  copy: src={{ ssh_key }} dest={{ tmp_workspace }}/ssh_key.pub

- name: create hosts file for hypervisor
  template: src=../templates/hosts dest=/etc/hosts

- name: power down any old instances of this group
  virt: name={{ hostvars[item]['inventory_hostname'] }}
        command=destroy
        uri=qemu:///system
  ignore_errors: true
  with_items: "{{ groups[group] }}"

- name: undefine any old instances of this group
  virt: name={{ hostvars[item]['inventory_hostname'] }}
        command=undefine
        uri=qemu:///system
  ignore_errors: true
  with_items: "{{ groups[group] }}"

- name: clean up any old disk images
  file: name={{ kvm_disk_dir }}/{{ hostvars[item]['inventory_hostname'] }}.qcow2 state=absent
  with_items: "{{ groups[group] }}"
  ignore_errors: true

- name: clean up any cloud-init ISOs
  file: name={{ kvm_disk_dir }}/{{ hostvars[item]['inventory_hostname'] }}-ci.iso state=absent
  with_items: "{{ groups[group] }}"
  ignore_errors: true

- name: clean up any old data disk images
  file: name={{ kvm_disk_dir }}/{{ hostvars[item]['inventory_hostname'] }}-data.qcow2 state=absent
  with_items: "{{ groups[group] }}"
  ignore_errors: true

- name: Copy over the virtual disk images
  copy: src={{ disk_image }} dest={{ kvm_disk_dir }}/{{ hostvars[item]['inventory_hostname'] }}.qcow2
  with_items: "{{ groups[group] }}"

# Each VM will have a 10G data disk that can be formatted / mounted wherever you want.
- name: create disk for data
  command: qemu-img create -f qcow2 -o preallocation=metadata {{ kvm_disk_dir }}/{{ hostvars[item]['inventory_hostname'] }}-data.qcow2 10G
  with_items: "{{ groups[group] }}"

- name: create temporary folder for host disk customization
  file: name={{ tmp_workspace }}/{{ hostvars[item]['inventory_hostname'] }} state=directory
  with_items: "{{ groups[group] }}"

- name: create the metadata ISO directory
  file: name={{ tmp_workspace }}/{{ hostvars[item]['inventory_hostname'] }}/metadata state=directory
  with_items: "{{ groups[group] }}"

- name: create meta-data files for cloud-init
  template: src=../templates/meta-data dest={{ tmp_workspace }}/{{ hostvars[item]['inventory_hostname'] }}/metadata/meta-data
  with_items: "{{ groups[group] }}"

- name: create user-data files for cloud-init
  template: src=../templates/user-data dest={{ tmp_workspace }}/{{ hostvars[item]['inventory_hostname'] }}/metadata/user-data
  with_items: "{{ groups[group] }}"

- name: create cloud-config ISO image
  command: genisoimage -o {{ tmp_workspace }}/{{ hostvars[item]['inventory_hostname'] }}-ci.iso -V cidata -r -J {{ tmp_workspace }}/{{ hostvars[item]['inventory_hostname'] }}/metadata/user-data {{ tmp_workspace }}/{{ hostvars[item]['inventory_hostname'] }}/metadata/meta-data
  with_items: "{{ groups[group] }}"

- name: copy over cloud-init ISOs
  copy: src={{ tmp_workspace }}/{{ hostvars[item]['inventory_hostname'] }}-ci.iso dest={{ kvm_disk_dir }}/{{ hostvars[item]['inventory_hostname'] }}-ci.iso
  with_items: "{{ groups[group] }}"

- name: Define guest images
  virt: name={{ hostvars[item]['inventory_hostname'] }}
        command=define
        xml="{{ lookup('template', '../templates/vm.xml') }}"
        uri=qemu:///system
  with_items: "{{ groups[group] }}"

- name: remove any static ips from libvirt
  command: virsh net-update default delete ip-dhcp-host '<host mac="{{ hostvars[item]['mac'] }}" ip="{{ hostvars[item]['ip'] }}"/>' --config --live
  ignore_errors: true
  with_items: "{{ groups[group] }}"

- name: add static ip addresses for the hosts
  command: virsh net-update default add ip-dhcp-host '<host mac="{{ hostvars[item]['mac'] }}" ip="{{ hostvars[item]['ip'] }}"/>' --config --live
  with_items: "{{ groups[group] }}"

- name: stop libvirt networking
  virt_net: command=destroy name=default
  delegate_to: 127.0.0.1

- name: start libvirt networking
  virt_net: command=start name=default
  delegate_to: 127.0.0.1

- name: Start the new Virtual Machines
  virt:  name={{ hostvars[item]['inventory_hostname'] }}
         command=start
         uri=qemu:///system
  with_items: "{{ groups[group] }}"

- name: make sure all vms are running
  local_action: wait_for host={{ hostvars[item]['inventory_hostname'] }} port=22 state=started delay=5 timeout=300
  sudo: false
  with_items: "{{ groups[group] }}"

- name: make sure the known_hosts file exists
  file: path={{ ssh_known_hosts_file }} state=touch

- name: remove any stale entries for these virtual Machines by hostname
  shell: "ssh-keygen -R {{ hostvars[item]['inventory_hostname'] }} -f {{ ssh_known_hosts_file}}"
  with_items: "{{ groups[group] }}"

- name: remove any stale entries for these virtual Machines by ip
  shell: "ssh-keygen -R {{ hostvars[item]['ip'] }} -f {{ ssh_known_hosts_file}}"
  with_items: "{{ groups[group] }}"

- name: add the new ssh host keys by hostname
  shell: "ssh-keyscan {{ hostvars[item]['inventory_hostname'] }} >> {{ ssh_known_hosts_file }}"
  with_items: "{{ groups[group] }}"

- name: add the new ssh host keys by ip
  shell: "ssh-keyscan {{ hostvars[item]['ip'] }} >> {{ ssh_known_hosts_file }}"
  with_items: "{{ groups[group] }}"

- name: ensure the system is accessable
  ping:
  with_items: "{{ groups[group] }}"

- name: collect the current username
  local_action: command whoami
  sudo: no
  register: local_username

- name: set the proper permissions back on known_hosts
  file: path={{ ssh_known_hosts_file }}
        owner={{ local_username.stdout }}
        group={{ local_username.stdout }}
        mode=0600
